#!/usr/bin/env ruby

###############################################################################
#                                       _           _           _             #
#  Project                             | |         | |         | |            #
#                                      | |__  _   _| |__  _   _| |__  _   _   #
#  Copyright (C) 2005 - 2015,          | '_ \| | | | '_ \| | | | '_ \| | | |  #
#  Maciej A. Czyzewski,                | | | | |_| | | | | |_| | | | | |_| |  #
#  <maciejanthonyczyzewski@gmail.com>  |_| |_|\__, |_| |_|\__, |_| |_|\__, |  #
#                                              __/ |       __/ |       __/ |  #
#                                             |___/       |___/       |___/   #
#                                                                             #
#  This software is licensed as described in the file LICENSE, which          #
#  you should have received as part of this distribution.                     #
#                                                                             #
###############################################################################

# This script installs to /usr/local only. To install elsewhere you can just
# untar https://github.com/maciejczyzewski/hyhyhy/tarball/master
# anywhere you like or change the value of HYHYHY_PREFIX.

HYHYHY_PREFIX = '/usr/local'
HYHYHY_REPO = 'https://github.com/maciejczyzewski/hyhyhy'
HYHYHY_BRANCH = 'feature'

# =============================================================================
# UTILITIES
# =============================================================================

module Color extend self
  def blue; bold 34; end
  def white; bold 39; end
  def red; underline 31; end
  def reset; escape 0; end
  def bold n; escape "1;#{n}" end
  def underline n; escape "4;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end

module Version
  def <=>(other)
    split(".").map { |i| i.to_i } <=> other.split(".").map { |i| i.to_i }
  end
end

class Array
  def shell_s
    cp = dup
    first = cp.shift
    cp.map{ |arg| arg.gsub " ", "\\ " }.unshift(first) * " "
  end
end

# Function: normal output (blue color)
def ohai *args
  puts "#{Color.blue}==>#{Color.white} #{args.shell_s}#{Color.reset}"
end

# Function: warning output (underline + red color)
def warn warning
  puts "#{Color.red}Warning#{Color.reset}: #{warning.chomp}"
end

# Function: bash output during process
def bash *args
  abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

# Function: run commands with permissions
def sudo *args
  ohai "/usr/bin/sudo", *args
  bash "/usr/bin/sudo", *args
end

# Function: asks the question
def ready?
  while true
    print "Are you ready for that? [Y/n]: "
    case gets.strip
      when 'Y', 'y', 'j', 'J', 'yes'
        break
      when /\A[nN]o?\Z/ #n or no
        abort
    end
  end
end

# Function: checks that you can download
def git
  @git ||= if ENV['GIT'] and File.executable? ENV['GIT']
    ENV['GIT']
  elsif Kernel.system '/usr/bin/which git'
    'git'
  else
    exe = `xcrun -find git 2>/dev/null`.chomp
    exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
  end

  return unless @git
  # Github only supports HTTPS fetches on 1.7.10 or later:
  # https://help.github.com/articles/https-cloning-errors
  `#{@git} --version` =~ /git version (\d\.\d+\.\d+)/
  return if $1.nil? or $1.extend(Version) < "1.7.10"

  @git
end

def gem
  @gem ||= if ENV['GEM'] and File.executable? ENV['GEM']
    ENV['GEM']
  elsif Kernel.system '/usr/bin/which gem'
    'gem'
  else
    exe = `xcrun -find gem 2>/dev/null`.chomp
    exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
  end

  @gem
end

# Function: return OS X version
def darwin_version
  @darwin_version ||= `/usr/bin/sw_vers -productVersion`.chomp[/10\.\d+/].extend(Version)
end

# =============================================================================
# INSTALLER
# =============================================================================

# Invalidate sudo timestamp before exiting
at_exit { Kernel.system "/usr/bin/sudo", "-k" }

# The block form of Dir.chdir fails later if Dir.CWD doesn't exist which I
# guess is fair enough. Also sudo prints a warning message for no good reason
Dir.chdir "/usr"

# Show ASCII
puts " _           _           _
| |         | |         | |
| |__  _   _| |__  _   _| |__  _   _
| '_ \\| | | | '_ \\| | | | '_ \\| | | |
| | | | |_| | | | | |_| | | | | |_| |
|_| |_|\\__, |_| |_|\\__, |_| |_|\\__, |
        __/ |       __/ |       __/ |
       |___/       |___/       |___/ "
puts "  #{Color.underline 35}github.com/maciejczyzewski/hyhyhy#{Color.reset}"
puts ""

# Anticipates
ohai "This script will install:"

# Structure
puts "#{HYHYHY_PREFIX}/bin/hyhyhy"       # executable (initiator)
puts "#{HYHYHY_PREFIX}/lib/hyhyhy/..."   # files & cache

# Ask
if ARGV.first != 'travis'
  ready?
end

# Create main directory
Dir.chdir HYHYHY_PREFIX do
  sudo "/bin/mkdir", '-p', 'lib/hyhyhy'
end

# Download files from repository
Dir.chdir "#{HYHYHY_PREFIX}/lib/hyhyhy" do
  # Here comes the party
  ohai "Downloading and installing hyhyhy..."

  if git
    # We do it in four steps to avoid merge errors when reinstalling
    bash git, "init", "-q"

    # "git remote add" will fail if the remote is defined in the global config
    bash git, "config", "remote.origin.url", HYHYHY_REPO
    bash git, "config", "remote.origin.fetch",
              "+refs/heads/*:refs/remotes/origin/*"

    args = git, "fetch", "origin",
           "#{HYHYHY_BRANCH}:refs/remotes/origin/#{HYHYHY_BRANCH}", "-n"
    args << "--depth=1" if ARGV.include? "--fast"
    bash(*args)

    bash git, "reset", "--hard", "origin/#{HYHYHY_BRANCH}"
  else
    warn "#{Color.white}git#{Color.reset} is not installed! " \
         "Do not worry, trying with #{Color.white}curl#{Color.reset}..."

    # Pipefail to cause the exit status from curl to propogate if it fails...
    # We use -k for curl because Leopard has a bunch of bad SSL certificates
    curl_flags = "fsSL"
    curl_flags << "k" if darwin_version <= "10.5"

    # Continue using Curl
    bash "/bin/bash -o pipefail -c '/usr/bin/curl -#{curl_flags} " \
         "#{HYHYHY_REPO}/tarball/#{HYHYHY_BRANCH} | " \
         "/usr/bin/tar xz -m --strip 1'"
  end
end

# Copy executable script
Dir.chdir HYHYHY_PREFIX do
  sudo "/bin/cp", "-p", "lib/hyhyhy/bin/hyhyhy", "bin/hyhyhy"

  # Repair problems with permissions
  sudo "/bin/chmod", "u+rwx", "bin/hyhyhy"
  sudo "/bin/chmod", "u+rwx", "lib/hyhyhy/src/cli.rb"
end

if gem
  ohai "CASE 1..."
else
  ohai "CASE 2..."
end

# All needed packages
ohai "Installing third-party libraries..."

sudo "gem", "install", "nanoc"
sudo "gem", "install", "kramdown"
sudo "gem", "install", "coderay"

# Ooopppss?!
warn "#{HYHYHY_PREFIX}/bin is not in your PATH." unless
     ENV['PATH'].split(':').include? "#{HYHYHY_PREFIX}/bin"

# Good news
ohai "Installation successful!"

# A little bit of culture...
puts "Run `hyhyhy help` to get started"
